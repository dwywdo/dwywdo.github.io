<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on dwywdo</title>
    <link>https://dwywdo.github.io/post/</link>
    <description>Recent content in Posts on dwywdo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 06 May 2021 20:48:03 +0900</lastBuildDate><atom:link href="https://dwywdo.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Spring Dependencies</title>
      <link>https://dwywdo.github.io/post/spring-dependencies/</link>
      <pubDate>Thu, 06 May 2021 20:48:03 +0900</pubDate>
      
      <guid>https://dwywdo.github.io/post/spring-dependencies/</guid>
      <description>Dependency Injection    Dependency Injection의 정의는 이미 IoC를 정리할 때 확인하였다.
 It is a process whereby objects define their dependencies (that is, the other objects they work with) only through constructor arguments, arguments to a factory method, or properties that are set on the object instance after it is constructed or returned from a factory method.
   DI 원칙이 지켜지면 객체가 자신의 의존성을 직접 관리할 필요 없이, 외부로부터 의존성을 주입받기 때문에 테스트에도 용이하다.</description>
    </item>
    
    <item>
      <title>Spring Bean</title>
      <link>https://dwywdo.github.io/post/spring-bean/</link>
      <pubDate>Wed, 05 May 2021 03:12:19 +0900</pubDate>
      
      <guid>https://dwywdo.github.io/post/spring-bean/</guid>
      <description>Spring의 Bean에 대하여   Spring의 IoC 컨테이너에 의해 관리되는 하나 이상의 객체들을 모두 빈(Bean)이라고 부른다.  빈은 IoC 컨테이너 생성 시 제공하는 Configuration Metadata에 의해 생성된다. 예를 들어 XML기반의 메타데이터 구성 시 &amp;lt;bean/&amp;gt; 태그를 통해서 생성된다 빈의 정의 그 자체에 대한 내용은 컨테이너 내부에서 BeanDefinition이라는 객체로 표현되며, 아래와 같은 정보들을 담고 있다.  Package-qualified 클래스 이름 (정의된 빈의 실제 구현 클래스) Behavioral 설정 요소 (Scope, Lifecycle callbacks와 같은 정보) Collaborator / Depedency 정보 (해당 빈이 동작하기 위해 필요한 다른 빈들에 대한 레퍼런스) 다른 설정 정보들 (예를 들어 Connection Pool을 관리하는 빈 내에서의 Pool 사이즈, 커넥션의 수 제한 등)   위의 요소들은 모두 Bean Definition을 구성하는 속성들이라고 볼 수 있으며, 스프링 문서의 여러 장에 걸쳐서 각각 소개되고 있다.</description>
    </item>
    
    <item>
      <title>Spring IoC</title>
      <link>https://dwywdo.github.io/post/spring-ioc/</link>
      <pubDate>Sat, 01 May 2021 16:17:13 +0900</pubDate>
      
      <guid>https://dwywdo.github.io/post/spring-ioc/</guid>
      <description>IoC 컨테이너    스프링 프레임워크에서 지키며 기능으로서 제공하는 IoC 원칙은 의존성 주입 (Dependency Injection, DI)라고도 불린다.
 It is a process whereby objects define their dependencies (that is, the other objects they work with) only through constructor arguments, arguments to a factory method, or properties that are set on the object instance after it is constructed or returned from a factory method.
   위의 문구는 Spring framework documentation에서 IoC에 대해 설명한 문장을 발췌해온 것으로, 풀어 써보면 아래와 같다.</description>
    </item>
    
    <item>
      <title>Mockito 란 무엇인가</title>
      <link>https://dwywdo.github.io/post/what-is-mockito/</link>
      <pubDate>Sun, 25 Apr 2021 10:48:36 +0900</pubDate>
      
      <guid>https://dwywdo.github.io/post/what-is-mockito/</guid>
      <description>Mockito?   Mock: 진짜 객체와 비슷하게 동작하지만 프로그래머가 직접 그 객체의 행동을 관리하는 객체 Mockito: Mock 객체를 쉽게 만들고 관리하고 검증할 수 있는 방법을 제공한다. (Mock을 지원하는 Framework)  Github link: https://github.com/mockito/mockito 테스트를 작성하는 자바 개발자의 50% 이상이 사용하는 Mock 프레임워크 2021년 4월 기준으로 현재 v3.9.7까지 릴리즈되었다.   애플리케이션이 복잡해지면서, 외부 API를 호출하거나 DB에 접근한다고 가정하면, 외부 API를 항상 테스트 중에 사용하기가 힘들다. 이러한 것들을 (DB로 치면 DAO / Repository 객체) Mock으로 만들어놓고, Mockito로 가정되는 행위를 정의해 놓을 수 있다.</description>
    </item>
    
    <item>
      <title>Junit - 1</title>
      <link>https://dwywdo.github.io/post/junit-1/</link>
      <pubDate>Sun, 21 Mar 2021 03:54:36 +0900</pubDate>
      
      <guid>https://dwywdo.github.io/post/junit-1/</guid>
      <description>JUnit?   자바 개발자가 가장 많이 사용하는 테스팅 프레임워크  이 외에도 Mockito, TestNG, Spock 등이 있다.   JUnit5는 2017년 10월에 공개가 되었다.  Spring Boot가 2.2로 버전업하면서, 기본 JUnit의 버전을 5로 올렸다.   JUnit4와의 차이점?  JUnit4는 하나의 Jar Dependency로 들어오고, JUnit이 참조하는 다른 라이브러리들이 존재하는 형태 JUnit5는 그 자체로 여러 모듈로 구성되어 있음  JUnit Platform 위에 Jupiter / Vintage를 올릴 수 있는 형태 Platform: JUnit으로 작성한 테스트를 실행하는 런쳐를 제공  Console에서도 실행할 수 있고, 자바 메소드 내에서도 실행 가능 IntelliJ 등에서도 JUnit으로 작성된 코드를 실행하는 것이 가능 (JUnit Platform을 사용해서 @Test Annotation이 붙은 메소드의 실행이 가능하다.</description>
    </item>
    
    <item>
      <title>Junit - 2</title>
      <link>https://dwywdo.github.io/post/junit-2/</link>
      <pubDate>Sun, 21 Mar 2021 03:54:36 +0900</pubDate>
      
      <guid>https://dwywdo.github.io/post/junit-2/</guid>
      <description>Custom Tag   JUnit5가 제공하는 애노테이션들은 Meta Annotation이기 때문에, Composed Annotation을 만들어서 사용할 수 있다. 커스텀한 애노테이션을 만들 때, 그 위에 저 Meta Annotation을 사용할 수 있다는 의미이다. 커스텀 애노테이션 선언 @Target(ElementType.METHOD) // 애노테이션 적용 대상: 메소드 @Retention(RetentionPolicy.RUNTIME) // Retention Strategy: 이 애노테이션을 사용한 코드가 애노테이션 정보를 런타임까지 유지해야 한다. @Test // Jupiter가 제공하는 애노테이션 @Tag(&amp;#34;fast&amp;#34;) public @interface FastTest { } @Target(ElementType.METHOD) // 애노테이션 적용 대상: 메소드 @Retention(RetentionPolicy.RUNTIME) // Retention Strategy: 이 애노테이션을 사용한 코드가 애노테이션 정보를 런타임까지 유지해야 한다.</description>
    </item>
    
    <item>
      <title>자바 데이터 타입, 변수, Conversion, 그리고 Casting</title>
      <link>https://dwywdo.github.io/post/java-data-types/</link>
      <pubDate>Sat, 13 Mar 2021 09:48:03 +0900</pubDate>
      
      <guid>https://dwywdo.github.io/post/java-data-types/</guid>
      <description>자바의 프리미티브(Primitive) 타입 종류와 값의 범위, 그리고 기본 값   자바는 변수에 대한 8가지 기본 타입을 제공하며, 이를 Primitive Types 이라고 부른다. Primitive type은 Boolean, Character, 4개의 Integer, 2개의 Floating-point 타입으로 구성되어 있다. Integer 타입과 Floating-point 타입은 모두 수를 표현하지만, 구성하고 있는 비트의 수/나타내는 방법 등이 다르다.     Type Contains Default Size Range     boolean true or false false 1 bit NA   byte Signed integer 0 8 bits -128 to 127   short Signed integer 0 16 bits -32768 to 32767   int Signed integer 0 32 bits -2147483648 to 2147483647   long Signed integer 0 63 bits -9223372036854775808 to 9223372036854775807   float IEEE 754 floating point 0.</description>
    </item>
    
    <item>
      <title>Gradle 기본 구성 파악하기</title>
      <link>https://dwywdo.github.io/post/gradle-pratice/</link>
      <pubDate>Fri, 22 Jan 2021 03:48:03 +0900</pubDate>
      
      <guid>https://dwywdo.github.io/post/gradle-pratice/</guid>
      <description>Gradle로 기본적인 Java 어플리케이션 빌드 환경 구축   자바 9 이상에서 지원하는 Module을 위한 프로젝트 구성도 Gradle이 지원하지만, 현재 자바 8버전을 쓰고 있으므로 어플리케이션과 라이브러리만 가지고 해보자. Ref  https://docs.gradle.org/current/samples/sample_building_java_applications.html https://docs.gradle.org/current/samples/sample_building_java_libraries.html http://blog.weirdx.io/post/48570   Gradle은 init이라고 하는 built-in task를 가지고 있다. init task는 빈 폴더에서 Gradle 프로젝트를 위한 초기 환경을 구성해준다. init은 마찬가지로 built-in으로 제공되는 wrapper task를 사용해 Gradle wrapper script인 gradlew를 생성한다. 빈 폴더를 생성하고, init 명령어를 실행하면 CLI 기반으로 여러가지 설정을 진행할 수 있다.</description>
    </item>
    
    <item>
      <title>Gradle 이란 무엇인가</title>
      <link>https://dwywdo.github.io/post/what-is-gradle/</link>
      <pubDate>Thu, 21 Jan 2021 03:48:03 +0900</pubDate>
      
      <guid>https://dwywdo.github.io/post/what-is-gradle/</guid>
      <description>Gradle이란 무엇인가   Ref  https://www.youtube.com/watch?v=s-XZ5B15ZJ0&amp;amp;list=PL7mmuO705dG2pdxCYCCJeAgOeuQN1seZz&amp;amp;index=1 https://docs.gradle.org/current/userguide/userguide.html   빌드를 수행하기 위한 빌드 시스템/도구/툴로, ant, maven과 같은 빌드 도구라고 볼 수 있다. 빌드를 위한 언어이다. 개발을 수행할 때 직접적으로 와닿지는 않지만, 중요한 부분이다. Java와 유사한 Groovy(Link)를 기반으로 한다.  Groovy: 자바 플랫폼을 기반으로 한 스크립트 언어. 컴파일을 거쳐 실행할 수도 있고, 직접 스크립트로도 실행이 가능하다. Java와 호환이 되기 때문에, Java로 작성된 소스코드를 Groovy에서 활용할 수도 있고, Groovy에서 자바 라이브러리를 사용할 수도 있다   maven이나 ant로 구성된 빌드시스템을 gradle로 손쉽게 바꿀 수 있다.</description>
    </item>
    
    <item>
      <title>JVM의 개념과 Java 코드 컴파일 및 실행 방법에 대한 정리</title>
      <link>https://dwywdo.github.io/post/what-is-jvm-and-how-to-execute-java/</link>
      <pubDate>Tue, 19 Jan 2021 01:07:50 +0900</pubDate>
      
      <guid>https://dwywdo.github.io/post/what-is-jvm-and-how-to-execute-java/</guid>
      <description>JVM이란 무엇인가    JVM은 자바 프로그램이 실행되는 데에 필요한 런타임 환경을 제공하는 프로그램이다.
 The JVM is a program that provides the runtime environment necessary for Java programs to execute. &amp;ndash; Evans, B., &amp;amp; Flanagan, D. (2018). Java in a Nutshell. Van Duuren Media.
   자바 프로그램은 실행되고자 하는 환경의 하드웨어 / OS 플랫폼에 맞는 JVM이 없다면 실행될 수 없다.
  즉, JVM은 하드웨어/운영체제에 종속적이지만, JVM이 가용하기만 하다면 자바 프로그램 자체는 그에 독립적으로 실행될 수 있다고 말할 수 있다.</description>
    </item>
    
  </channel>
</rss>
